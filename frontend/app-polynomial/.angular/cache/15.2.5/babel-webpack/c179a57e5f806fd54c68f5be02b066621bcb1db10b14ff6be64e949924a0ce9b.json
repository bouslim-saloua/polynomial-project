{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { jwtDecode } from 'jwt-decode';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.apiUrl = 'http://localhost:8888/api/auth';\n    this.isLoggedInSubject = new BehaviorSubject(false);\n    this.isLoggedIn$ = this.isLoggedInSubject.asObservable();\n  }\n  login(credentials) {\n    console.log('Tentative de connexion avec:', credentials);\n    return this.http.post('http://localhost:8888/api/auth/signin', credentials).pipe(tap({\n      next: response => {\n        console.log('Réponse du serveur:', response);\n        if (response && response.token) {\n          localStorage.setItem('token', response.token);\n          const decodedToken = jwtDecode(response.token);\n          console.log('Token décodé:', decodedToken);\n          const userData = {\n            email: decodedToken.sub\n          };\n          this.findByEmail(userData.email).subscribe({\n            next: userDetails => {\n              console.log('Détails utilisateur récupérés:', userDetails);\n              const fullUserData = {\n                id: userDetails.id,\n                email: userDetails.email,\n                nom: userDetails.nom,\n                prenom: userDetails.prenom\n              };\n              localStorage.setItem('user', JSON.stringify(fullUserData));\n              this.isLoggedInSubject.next(true);\n              console.log('Utilisateur complet enregistré:', fullUserData);\n              localStorage.setItem('token', response.token);\n              localStorage.setItem('user', JSON.stringify(response.user));\n            },\n            error: error => {\n              console.error('Erreur lors de la récupération des détails utilisateur:', error);\n            }\n          });\n        }\n      },\n      error: error => {\n        console.error('Erreur de connexion:', error);\n      }\n    }));\n  }\n  findByEmail(email) {\n    return this.http.get(`http://localhost:8888/api/auth/findByEmail?email=${email}`);\n  }\n  get isLoggedIn() {\n    return this.isLoggedInSubject.value;\n  }\n  register(userData) {\n    return this.http.post(`${this.apiUrl}/signup`, userData);\n  }\n  logout() {\n    localStorage.removeItem('user');\n    localStorage.removeItem('userId');\n    this.isLoggedInSubject.next(false);\n    localStorage.removeItem('authToken');\n    this.router.navigate(['/login']);\n  }\n  signup(userData) {\n    return this.http.post(`${this.apiUrl}/signup`, userData);\n  }\n  getUserId() {\n    return this.getUserIdFromToken();\n  }\n  getUserIdFromToken() {\n    const token = localStorage.getItem('token');\n    if (token) {\n      try {\n        const decodedToken = jwtDecode(token);\n        return decodedToken?.id || null;\n      } catch (error) {\n        console.error('Invalid token:', error);\n        return null;\n      }\n    }\n    return null;\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["BehaviorSubject","tap","jwtDecode","AuthService","constructor","http","router","isLoggedInSubject","asObservable","login","credentials","console","log","post","pipe","next","response","token","localStorage","setItem","decodedToken","userData","email","sub","findByEmail","subscribe","userDetails","fullUserData","id","nom","prenom","JSON","stringify","user","error","get","isLoggedIn","value","register","apiUrl","logout","removeItem","navigate","signup","getUserId","getUserIdFromToken","getItem","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\HP EliteBook 840 G6\\Desktop\\s1\\AC\\project\\polynomial-project\\frontend\\app-polynomial\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { Router } from '@angular/router';\nimport { jwtDecode } from 'jwt-decode';\n\ninterface AuthResponse {\n  token: string;\n  user: {\n    id: number;\n    email: string;\n    nom:string;\n    prenom:string\n};\n}\n\ninterface LoginCredentials {\n  email: string;\n  password: string;\n}\n\n@Injectable({\n  providedIn: 'root', \n})\nexport class AuthService {\n  private apiUrl = 'http://localhost:8888/api/auth'; \n  private isLoggedInSubject = new BehaviorSubject<boolean>(false);\n  isLoggedIn$ = this.isLoggedInSubject.asObservable();\n\n  constructor(private http: HttpClient,private router: Router) {}\n\n  \nlogin(credentials: LoginCredentials): Observable<AuthResponse> {\n  console.log('Tentative de connexion avec:', credentials); \n\n  return this.http.post<AuthResponse>('http://localhost:8888/api/auth/signin', credentials).pipe(\n    tap({\n      next: (response: AuthResponse) => {\n        console.log('Réponse du serveur:', response); \n        if (response && response.token) {\n          localStorage.setItem('token', response.token);\n\n          const decodedToken: any = jwtDecode(response.token);\n          console.log('Token décodé:', decodedToken);\n\n          const userData = {\n            email: decodedToken.sub, \n          };\n\n          \n          this.findByEmail(userData.email).subscribe({\n            next: (userDetails) => {\n              console.log('Détails utilisateur récupérés:', userDetails);\n              const fullUserData = {\n                id: userDetails.id,\n                email: userDetails.email,\n                nom: userDetails.nom,\n                prenom: userDetails.prenom,\n              };\n\n              localStorage.setItem('user', JSON.stringify(fullUserData));\n              this.isLoggedInSubject.next(true);\n              console.log('Utilisateur complet enregistré:', fullUserData);\n              localStorage.setItem('token', response.token); \n              localStorage.setItem('user', JSON.stringify(response.user));         \n            },\n            error: (error) => {\n              console.error('Erreur lors de la récupération des détails utilisateur:', error);\n            },\n          });\n        }\n      },\n      error: (error) => {\n        console.error('Erreur de connexion:', error); \n      },\n    })\n  );\n}\n\n  findByEmail(email: string): Observable<any> {\n    return this.http.get<any>(`http://localhost:8888/api/auth/findByEmail?email=${email}`);\n}\n\n  get isLoggedIn(): boolean {\n    return this.isLoggedInSubject.value;\n  }\n  \n  register(userData: any): Observable<any> {\n    return this.http.post(`${this.apiUrl}/signup`, userData);\n  }\n  logout() {\n    localStorage.removeItem('user');\n    localStorage.removeItem('userId');\n    this.isLoggedInSubject.next(false);\n    localStorage.removeItem('authToken');\n    this.router.navigate(['/login']); \n  }\n  signup(userData: {\n    nom: string,\n    prenom: string,\n    email: string,\n    password: string,\n    role: string[]\n  }): Observable<any> {\n    return this.http.post(`${this.apiUrl}/signup`, userData);\n  }\n\n  getUserId(): number | null {\n    return this.getUserIdFromToken();\n  }\n\n  getUserIdFromToken(): number | null {\n    const token = localStorage.getItem('token');\n    if (token) {\n      try {\n        const decodedToken: any = jwtDecode(token);\n        return decodedToken?.id || null;\n      } catch (error) {\n        console.error('Invalid token:', error);\n        return null;\n      }\n    }\n    return null;\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}