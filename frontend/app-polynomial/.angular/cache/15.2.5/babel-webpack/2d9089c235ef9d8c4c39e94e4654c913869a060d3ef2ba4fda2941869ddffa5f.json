{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { jwtDecode } from 'jwt-decode';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.apiUrl = 'http://localhost:8088/api/auth'; // Remplacez par l'URL de votre API\n    this.isLoggedInSubject = new BehaviorSubject(false);\n    this.isLoggedIn$ = this.isLoggedInSubject.asObservable();\n  }\n  // Méthode pour se connecter\n  login(credentials) {\n    console.log('Tentative de connexion avec:', credentials); // Log des credentials\n    return this.http.post('http://localhost:8088/api/auth/signin', credentials).pipe(tap({\n      next: response => {\n        console.log('Réponse du serveur:', response); // Log de la réponse\n        if (response && response.token) {\n          localStorage.setItem('token', response.token);\n          // Décodage du token pour obtenir les informations utilisateur\n          const decodedToken = jwtDecode(response.token);\n          console.log('Token décodé:', decodedToken); // Vérifier si les données sont correctes\n          const userData = {\n            id: decodedToken.id,\n            email: decodedToken.sub,\n            nom: decodedToken.nom,\n            prenom: decodedToken.prenom\n          };\n          localStorage.setItem('token', response.token);\n          localStorage.setItem('user', JSON.stringify(userData));\n          this.isLoggedInSubject.next(true);\n          const storedUser = JSON.parse(localStorage.getItem('user') || '{}');\n          console.log('Utilisateur récupéré:', userData);\n        }\n      },\n      error: error => {\n        console.error('Erreur de connexion:', error); // Log des erreurs\n      }\n    }));\n  }\n\n  get isLoggedIn() {\n    return this.isLoggedInSubject.value;\n  }\n  // Méthode pour s'inscrire\n  register(userData) {\n    return this.http.post(`${this.apiUrl}/signup`, userData);\n  }\n  logout() {\n    // Clear the session or JWT token from localStorage or cookies\n    this.isLoggedInSubject.next(false);\n    localStorage.removeItem('authToken'); // Example of clearing the token\n    this.router.navigate(['/login']); // Redirect to the login page after logout\n  }\n\n  signup(userData) {\n    return this.http.post(`${this.apiUrl}/signup`, userData);\n  }\n  getUserId() {\n    // Utiliser getUserIdFromToken pour plus de cohérence\n    return this.getUserIdFromToken();\n  }\n  getUserIdFromToken() {\n    const token = localStorage.getItem('token');\n    if (token) {\n      try {\n        const decodedToken = jwtDecode(token);\n        return decodedToken?.id || null;\n      } catch (error) {\n        console.error('Invalid token:', error);\n        return null;\n      }\n    }\n    return null;\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["BehaviorSubject","tap","jwtDecode","AuthService","constructor","http","router","isLoggedInSubject","asObservable","login","credentials","console","log","post","pipe","next","response","token","localStorage","setItem","decodedToken","userData","id","email","sub","nom","prenom","JSON","stringify","storedUser","parse","getItem","error","isLoggedIn","value","register","apiUrl","logout","removeItem","navigate","signup","getUserId","getUserIdFromToken","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\HP EliteBook 840 G6\\Desktop\\s1\\AC\\project\\polynomial-project\\frontend\\app-polynomial\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { Router } from '@angular/router';\nimport { jwtDecode } from 'jwt-decode';\n\ninterface AuthResponse {\n  token: string;\n  user: {\n    id: number;\n    email: string;\n    nom:string;\n    prenom:string\n};\n}\n\ninterface LoginCredentials {\n  email: string;\n  password: string;\n}\n\n@Injectable({\n  providedIn: 'root', // Fournisseur global (disponible dans toute l'application)\n})\nexport class AuthService {\n  private apiUrl = 'http://localhost:8088/api/auth'; // Remplacez par l'URL de votre API\n  private isLoggedInSubject = new BehaviorSubject<boolean>(false);\n  isLoggedIn$ = this.isLoggedInSubject.asObservable();\n\n  constructor(private http: HttpClient,private router: Router) {}\n\n  // Méthode pour se connecter\n  login(credentials: LoginCredentials): Observable<AuthResponse> {\n    console.log('Tentative de connexion avec:', credentials); // Log des credentials\n\n    return this.http.post<AuthResponse>('http://localhost:8088/api/auth/signin', credentials).pipe(\n      tap({\n        next: (response: AuthResponse) => {\n          console.log('Réponse du serveur:', response); // Log de la réponse\n          if (response && response.token) {\n            localStorage.setItem('token', response.token);\n            \n            // Décodage du token pour obtenir les informations utilisateur\n            const decodedToken: any = jwtDecode(response.token);\n            console.log('Token décodé:', decodedToken); // Vérifier si les données sont correctes\n            const userData = {\n              id: decodedToken.id,\n              email: decodedToken.sub, // l'email est souvent dans \"sub\" dans le JWT\n              nom: decodedToken.nom,\n              prenom: decodedToken.prenom\n            };\n\n            \n            localStorage.setItem('token',  response.token);\n            localStorage.setItem('user', JSON.stringify(userData));\n            this.isLoggedInSubject.next(true);\n            const storedUser = JSON.parse(localStorage.getItem('user') || '{}');\n            console.log('Utilisateur récupéré:', userData);\n          }\n        },\n        error: (error) => {\n          console.error('Erreur de connexion:', error); // Log des erreurs\n        }\n      })\n    );\n  }\n\n  get isLoggedIn(): boolean {\n    return this.isLoggedInSubject.value;\n  }\n  // Méthode pour s'inscrire\n  register(userData: any): Observable<any> {\n    return this.http.post(`${this.apiUrl}/signup`, userData);\n  }\n  logout() {\n    // Clear the session or JWT token from localStorage or cookies\n    this.isLoggedInSubject.next(false);\n    localStorage.removeItem('authToken'); // Example of clearing the token\n    this.router.navigate(['/login']); // Redirect to the login page after logout\n  }\n  signup(userData: {\n    nom: string,\n    prenom: string,\n    email: string,\n    password: string,\n    role: string[]\n  }): Observable<any> {\n    return this.http.post(`${this.apiUrl}/signup`, userData);\n  }\n\n  getUserId(): number | null {\n    // Utiliser getUserIdFromToken pour plus de cohérence\n    return this.getUserIdFromToken();\n  }\n\n  getUserIdFromToken(): number | null {\n    const token = localStorage.getItem('token');\n    if (token) {\n      try {\n        const decodedToken: any = jwtDecode(token);\n        return decodedToken?.id || null;\n      } catch (error) {\n        console.error('Invalid token:', error);\n        return null;\n      }\n    }\n    return null;\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}