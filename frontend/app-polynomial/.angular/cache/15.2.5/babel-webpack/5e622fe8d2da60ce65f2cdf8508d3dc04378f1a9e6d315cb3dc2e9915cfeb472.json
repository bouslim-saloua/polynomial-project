{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { jwtDecode } from 'jwt-decode';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.apiUrl = 'http://localhost:8088/api/auth'; // Remplacez par l'URL de votre API\n    this.isLoggedInSubject = new BehaviorSubject(false);\n    this.isLoggedIn$ = this.isLoggedInSubject.asObservable();\n  }\n  // Méthode pour se connecter\n  login(credentials) {\n    return this.http.post('http://localhost:8088/api/auth/signin', credentials).pipe(tap(response => {\n      if (response.token) {\n        localStorage.setItem('token', response.token);\n        localStorage.setItem('user', JSON.stringify(response.user)); // Stocker les infos utilisateur\n        this.isLoggedInSubject.next(true);\n        console.log('Utilisateur connecté:', response.user); // Afficher dans la console\n      }\n    }));\n  }\n\n  get isLoggedIn() {\n    return this.isLoggedInSubject.value;\n  }\n  // Méthode pour s'inscrire\n  register(userData) {\n    return this.http.post(`${this.apiUrl}/signup`, userData);\n  }\n  logout() {\n    // Clear the session or JWT token from localStorage or cookies\n    this.isLoggedInSubject.next(false);\n    localStorage.removeItem('authToken'); // Example of clearing the token\n    this.router.navigate(['/login']); // Redirect to the login page after logout\n  }\n\n  signup(userData) {\n    return this.http.post(`${this.apiUrl}/signup`, userData);\n  }\n  getUserId() {\n    // Vous pouvez adapter cette méthode selon votre logique d'authentification\n    const user = JSON.parse(localStorage.getItem('user') || '{}');\n    return user.id || 0;\n  }\n  getUserIdFromToken() {\n    const token = localStorage.getItem('token');\n    if (token) {\n      try {\n        const decodedToken = jwtDecode(token);\n        return decodedToken?.id || null;\n      } catch (error) {\n        console.error('Invalid token:', error);\n      }\n    }\n    return null;\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,eAAe,QAAQ,MAAM;AAClD,SAASC,GAAG,QAAQ,gBAAgB;AAEpC,SAASC,SAAS,QAAQ,YAAY;;;;AAoBtC,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB,EAASC,MAAc;IAAvC,SAAI,GAAJD,IAAI;IAAqB,WAAM,GAANC,MAAM;IAJ3C,WAAM,GAAG,gCAAgC,CAAC,CAAC;IAC3C,sBAAiB,GAAG,IAAIN,eAAe,CAAU,KAAK,CAAC;IAC/D,gBAAW,GAAG,IAAI,CAACO,iBAAiB,CAACC,YAAY,EAAE;EAEW;EAE9D;EACAC,KAAK,CAACC,WAA6B;IACjC,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAe,uCAAuC,EAAED,WAAW,CAAC,CAACE,IAAI,CAC5FX,GAAG,CAAEY,QAAsB,IAAI;MAC7B,IAAIA,QAAQ,CAACC,KAAK,EAAE;QAClBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,QAAQ,CAACC,KAAK,CAAC;QAC7CC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACL,QAAQ,CAACM,IAAI,CAAC,CAAC,CAAC,CAAC;QAC7D,IAAI,CAACZ,iBAAiB,CAACa,IAAI,CAAC,IAAI,CAAC;QACjCC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAET,QAAQ,CAACM,IAAI,CAAC,CAAC,CAAC;;IAIzD,CAAC,CAAC,CACH;EACH;;EAEA,IAAII,UAAU;IACZ,OAAO,IAAI,CAAChB,iBAAiB,CAACiB,KAAK;EACrC;EACA;EACAC,QAAQ,CAACC,QAAa;IACpB,OAAO,IAAI,CAACrB,IAAI,CAACM,IAAI,CAAC,GAAG,IAAI,CAACgB,MAAM,SAAS,EAAED,QAAQ,CAAC;EAC1D;EACAE,MAAM;IACJ;IACA,IAAI,CAACrB,iBAAiB,CAACa,IAAI,CAAC,KAAK,CAAC;IAClCL,YAAY,CAACc,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;IACtC,IAAI,CAACvB,MAAM,CAACwB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;EACpC;;EACAC,MAAM,CAACL,QAMN;IACC,OAAO,IAAI,CAACrB,IAAI,CAACM,IAAI,CAAC,GAAG,IAAI,CAACgB,MAAM,SAAS,EAAED,QAAQ,CAAC;EAC1D;EAEAM,SAAS;IACP;IACA,MAAMb,IAAI,GAAGF,IAAI,CAACgB,KAAK,CAAClB,YAAY,CAACmB,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC;IAC7D,OAAOf,IAAI,CAACgB,EAAE,IAAI,CAAC;EACrB;EACAC,kBAAkB;IAChB,MAAMtB,KAAK,GAAGC,YAAY,CAACmB,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIpB,KAAK,EAAE;MACT,IAAI;QACF,MAAMuB,YAAY,GAAQnC,SAAS,CAACY,KAAK,CAAC;QAC1C,OAAOuB,YAAY,EAAEF,EAAE,IAAI,IAAI;OAChC,CAAC,OAAOG,KAAK,EAAE;QACdjB,OAAO,CAACiB,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;;;IAG1C,OAAO,IAAI;EACb;;AA9DWnC,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAoC,SAAXpC,WAAW;EAAAqC,YAFV;AAAM","names":["BehaviorSubject","tap","jwtDecode","AuthService","constructor","http","router","isLoggedInSubject","asObservable","login","credentials","post","pipe","response","token","localStorage","setItem","JSON","stringify","user","next","console","log","isLoggedIn","value","register","userData","apiUrl","logout","removeItem","navigate","signup","getUserId","parse","getItem","id","getUserIdFromToken","decodedToken","error","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\HP EliteBook 840 G6\\Desktop\\s1\\AC\\project\\polynomial-project\\frontend\\app-polynomial\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { Router } from '@angular/router';\nimport { jwtDecode } from 'jwt-decode';\n\ninterface AuthResponse {\n  token: string;\n  user: {\n    id: number;\n    email: string;\n    nom:string;\n    prenom:string\n};\n}\n\ninterface LoginCredentials {\n  email: string;\n  password: string;\n}\n\n@Injectable({\n  providedIn: 'root', // Fournisseur global (disponible dans toute l'application)\n})\nexport class AuthService {\n  private apiUrl = 'http://localhost:8088/api/auth'; // Remplacez par l'URL de votre API\n  private isLoggedInSubject = new BehaviorSubject<boolean>(false);\n  isLoggedIn$ = this.isLoggedInSubject.asObservable();\n\n  constructor(private http: HttpClient,private router: Router) {}\n\n  // Méthode pour se connecter\n  login(credentials: LoginCredentials): Observable<AuthResponse> {\n    return this.http.post<AuthResponse>('http://localhost:8088/api/auth/signin', credentials).pipe(\n      tap((response: AuthResponse) => {\n        if (response.token) {\n          localStorage.setItem('token', response.token);\n          localStorage.setItem('user', JSON.stringify(response.user)); // Stocker les infos utilisateur\n          this.isLoggedInSubject.next(true);\n          console.log('Utilisateur connecté:', response.user); // Afficher dans la console\n        \n          \n        }\n      })\n    );\n  }\n\n  get isLoggedIn(): boolean {\n    return this.isLoggedInSubject.value;\n  }\n  // Méthode pour s'inscrire\n  register(userData: any): Observable<any> {\n    return this.http.post(`${this.apiUrl}/signup`, userData);\n  }\n  logout() {\n    // Clear the session or JWT token from localStorage or cookies\n    this.isLoggedInSubject.next(false);\n    localStorage.removeItem('authToken'); // Example of clearing the token\n    this.router.navigate(['/login']); // Redirect to the login page after logout\n  }\n  signup(userData: {\n    nom: string,\n    prenom: string,\n    email: string,\n    password: string,\n    role: string[]\n  }): Observable<any> {\n    return this.http.post(`${this.apiUrl}/signup`, userData);\n  }\n\n  getUserId(): number {\n    // Vous pouvez adapter cette méthode selon votre logique d'authentification\n    const user = JSON.parse(localStorage.getItem('user') || '{}');\n    return user.id || 0;\n  }\n  getUserIdFromToken(): number | null {\n    const token = localStorage.getItem('token');\n    if (token) {\n      try {\n        const decodedToken: any = jwtDecode(token);\n        return decodedToken?.id || null;\n      } catch (error) {\n        console.error('Invalid token:', error);\n      }\n    }\n    return null;\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}