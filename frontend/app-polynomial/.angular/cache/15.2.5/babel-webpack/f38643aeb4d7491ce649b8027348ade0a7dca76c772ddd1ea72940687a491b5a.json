{"ast":null,"code":"import { tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nexport class CalculService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n    this.apiUrl = 'http://localhost:8090/calcule'; // URL de votre backend\n    this.historiqueUrl = 'http://localhost:8089/historique';\n  }\n  factoriser(polynome) {\n    return this.http.post(`${this.apiUrl}/factorisation`, {\n      polynome\n    }).pipe(tap(resultat => {\n      if (this.authService.isAuthenticated()) {\n        this.sauvegarderHistorique({\n          type: 'factorisation',\n          polynome: polynome,\n          resultat: resultat\n        });\n      }\n    }));\n  }\n  calculerRacines(polynome) {\n    return this.http.post(`${this.apiUrl}/racines`, {\n      polynome\n    }).pipe(tap(resultat => {\n      if (this.authService.isAuthenticated()) {\n        this.sauvegarderHistorique({\n          type: 'racines',\n          polynome: polynome,\n          resultat: resultat\n        });\n      }\n    }));\n  }\n  sauvegarderHistorique(donnees) {\n    this.http.post(`${this.historiqueUrl}/`, {\n      ...donnees,\n      userId: this.authService.getUserId(),\n      date: new Date()\n    }).subscribe();\n  }\n}\nCalculService.ɵfac = function CalculService_Factory(t) {\n  return new (t || CalculService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n};\nCalculService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CalculService,\n  factory: CalculService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,GAAG,QAAQ,MAAM;;;;AAMtC,OAAM,MAAOC,aAAa;EAGxBC,YAAoBC,IAAgB,EAAUC,WAAwB;IAAlD,SAAI,GAAJD,IAAI;IAAsB,gBAAW,GAAXC,WAAW;IAFjD,WAAM,GAAG,+BAA+B,CAAC,CAAC;IAC1C,kBAAa,GAAG,kCAAkC;EACe;EAIzEC,UAAU,CAACC,QAAgB;IACzB,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAC,GAAG,IAAI,CAACC,MAAM,gBAAgB,EAAE;MAAEF;IAAQ,CAAE,CAAC,CAACG,IAAI,CACtET,GAAG,CAACU,QAAQ,IAAG;MACb,IAAI,IAAI,CAACN,WAAW,CAACO,eAAe,EAAE,EAAE;QACtC,IAAI,CAACC,qBAAqB,CAAC;UACzBC,IAAI,EAAE,eAAe;UACrBP,QAAQ,EAAEA,QAAQ;UAClBI,QAAQ,EAAEA;SACX,CAAC;;IAEN,CAAC,CAAC,CACH;EACH;EACAI,eAAe,CAACR,QAAgB;IAC9B,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAC,GAAG,IAAI,CAACC,MAAM,UAAU,EAAE;MAAEF;IAAQ,CAAE,CAAC,CAACG,IAAI,CAChET,GAAG,CAACU,QAAQ,IAAG;MACb,IAAI,IAAI,CAACN,WAAW,CAACO,eAAe,EAAE,EAAE;QACtC,IAAI,CAACC,qBAAqB,CAAC;UACzBC,IAAI,EAAE,SAAS;UACfP,QAAQ,EAAEA,QAAQ;UAClBI,QAAQ,EAAEA;SACX,CAAC;;IAEN,CAAC,CAAC,CACH;EACH;EAEQE,qBAAqB,CAACG,OAAY;IACxC,IAAI,CAACZ,IAAI,CAACI,IAAI,CAAC,GAAG,IAAI,CAACS,aAAa,GAAG,EAAE;MACvC,GAAGD,OAAO;MACVE,MAAM,EAAE,IAAI,CAACb,WAAW,CAACc,SAAS,EAAE;MACpCC,IAAI,EAAE,IAAIC,IAAI;KACf,CAAC,CAACC,SAAS,EAAE;EAChB;;AAxCWpB,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;SAAbA,aAAa;EAAAqB,SAAbrB,aAAa;EAAAsB,YAFZ;AAAM","names":["tap","CalculService","constructor","http","authService","factoriser","polynome","post","apiUrl","pipe","resultat","isAuthenticated","sauvegarderHistorique","type","calculerRacines","donnees","historiqueUrl","userId","getUserId","date","Date","subscribe","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\HP EliteBook 840 G6\\Desktop\\s1\\AC\\project\\polynomial-project\\frontend\\app-polynomial\\src\\app\\services\\calcul.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, tap } from 'rxjs';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CalculService {\n  private apiUrl = 'http://localhost:8090/calcule'; // URL de votre backend\n  private historiqueUrl = 'http://localhost:8089/historique'; \n  constructor(private http: HttpClient, private authService: AuthService) {}\n\n  \n\n  factoriser(polynome: string): Observable<any> {\n    return this.http.post(`${this.apiUrl}/factorisation`, { polynome }).pipe(\n      tap(resultat => {\n        if (this.authService.isAuthenticated()) {\n          this.sauvegarderHistorique({\n            type: 'factorisation',\n            polynome: polynome,\n            resultat: resultat\n          });\n        }\n      })\n    );\n  }\n  calculerRacines(polynome: string): Observable<any> {\n    return this.http.post(`${this.apiUrl}/racines`, { polynome }).pipe(\n      tap(resultat => {\n        if (this.authService.isAuthenticated()) {\n          this.sauvegarderHistorique({\n            type: 'racines',\n            polynome: polynome,\n            resultat: resultat\n          });\n        }\n      })\n    );\n  }\n\n  private sauvegarderHistorique(donnees: any): void {\n    this.http.post(`${this.historiqueUrl}/`, {\n      ...donnees,\n      userId: this.authService.getUserId(),\n      date: new Date()\n    }).subscribe();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}