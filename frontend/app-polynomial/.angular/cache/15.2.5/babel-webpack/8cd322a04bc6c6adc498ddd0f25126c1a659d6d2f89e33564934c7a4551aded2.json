{"ast":null,"code":"import { switchMap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./historique.service\";\nexport class CalculService {\n  constructor(http, historiqueService) {\n    this.http = http;\n    this.historiqueService = historiqueService;\n    this.apiUrl = 'http://localhost:8090/calcule'; // URL de votre backend\n  }\n  // Méthode pour factoriser le polynôme\n  factoriser(polynome, utilisateurId) {\n    return this.http.post(`${this.apiUrl}/factorisation`, {\n      polynome\n    }).pipe(\n    // Enregistrer l'historique après le calcul\n    switchMap(response => {\n      return this.historiqueService.saveHistoriqueAfterCalculation(utilisateurId, response.calculId,\n      // Vous devez avoir calculId dans la réponse\n      polynome, response.resultat // Le résultat du calcul\n      );\n    }));\n  }\n  // Méthode pour calculer les racines\n  calculerRacines(polynome, utilisateurId) {\n    return this.http.post(`${this.apiUrl}/racines`, {\n      polynome\n    }).pipe(\n    // Enregistrer l'historique après le calcul\n    switchMap(response => {\n      return this.historiqueService.saveHistoriqueAfterCalculation(utilisateurId, response.calculId,\n      // Vous devez avoir calculId dans la réponse\n      polynome, response.resultat // Le résultat du calcul\n      );\n    }));\n  }\n}\n\nCalculService.ɵfac = function CalculService_Factory(t) {\n  return new (t || CalculService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.HistoriqueService));\n};\nCalculService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CalculService,\n  factory: CalculService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,SAAS,QAAQ,MAAM;;;;AAM5C,OAAM,MAAOC,aAAa;EAGxBC,YAAoBC,IAAgB,EAAUC,iBAAoC;IAA9D,SAAI,GAAJD,IAAI;IAAsB,sBAAiB,GAAjBC,iBAAiB;IAFvD,WAAM,GAAG,+BAA+B,CAAC,CAAC;EAEmC;EAErF;EACAC,UAAU,CAACC,QAAgB,EAAEC,aAAqB;IAChD,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAC,GAAG,IAAI,CAACC,MAAM,gBAAgB,EAAE;MAAEH;IAAQ,CAAE,CAAC,CAACI,IAAI;IACtE;IACAV,SAAS,CAAEW,QAAa,IAAI;MAC1B,OAAO,IAAI,CAACP,iBAAiB,CAACQ,8BAA8B,CAC1DL,aAAa,EACbI,QAAQ,CAACE,QAAQ;MAAE;MACnBP,QAAQ,EACRK,QAAQ,CAACG,QAAQ,CAAC;MAAA,CACnB;IACH,CAAC,CAAC,CACH;EACH;EAEA;EACAC,eAAe,CAACT,QAAgB,EAAEC,aAAqB;IACrD,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAC,GAAG,IAAI,CAACC,MAAM,UAAU,EAAE;MAAEH;IAAQ,CAAE,CAAC,CAACI,IAAI;IAChE;IACAV,SAAS,CAAEW,QAAa,IAAI;MAC1B,OAAO,IAAI,CAACP,iBAAiB,CAACQ,8BAA8B,CAC1DL,aAAa,EACbI,QAAQ,CAACE,QAAQ;MAAE;MACnBP,QAAQ,EACRK,QAAQ,CAACG,QAAQ,CAAC;MAAA,CACnB;IACH,CAAC,CAAC,CACH;EACH;;;AAjCWb,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;SAAbA,aAAa;EAAAe,SAAbf,aAAa;EAAAgB,YAFZ;AAAM","names":["switchMap","CalculService","constructor","http","historiqueService","factoriser","polynome","utilisateurId","post","apiUrl","pipe","response","saveHistoriqueAfterCalculation","calculId","resultat","calculerRacines","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\HP EliteBook 840 G6\\Desktop\\s1\\AC\\project\\polynomial-project\\frontend\\app-polynomial\\src\\app\\services\\calcul.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, switchMap } from 'rxjs';\nimport { HistoriqueService } from './historique.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CalculService {\n  private apiUrl = 'http://localhost:8090/calcule'; // URL de votre backend\n\n  constructor(private http: HttpClient, private historiqueService: HistoriqueService) {}\n\n  // Méthode pour factoriser le polynôme\n  factoriser(polynome: string, utilisateurId: number): Observable<any> {\n    return this.http.post(`${this.apiUrl}/factorisation`, { polynome }).pipe(\n      // Enregistrer l'historique après le calcul\n      switchMap((response: any) => {\n        return this.historiqueService.saveHistoriqueAfterCalculation(\n          utilisateurId,\n          response.calculId, // Vous devez avoir calculId dans la réponse\n          polynome,\n          response.resultat // Le résultat du calcul\n        );\n      })\n    );\n  }\n\n  // Méthode pour calculer les racines\n  calculerRacines(polynome: string, utilisateurId: number): Observable<any> {\n    return this.http.post(`${this.apiUrl}/racines`, { polynome }).pipe(\n      // Enregistrer l'historique après le calcul\n      switchMap((response: any) => {\n        return this.historiqueService.saveHistoriqueAfterCalculation(\n          utilisateurId,\n          response.calculId, // Vous devez avoir calculId dans la réponse\n          polynome,\n          response.resultat // Le résultat du calcul\n        );\n      })\n    );\n  }\n}\n  \n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}