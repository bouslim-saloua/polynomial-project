{"ast":null,"code":"import { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.apiUrl = 'http://localhost:8088/api/auth'; // Remplacez par l'URL de votre API\n    this._isLoggedIn = false; // private backing field\n  }\n  // Méthode pour se connecter\n  login(credentials) {\n    return this.http.post('http://localhost:8088/api/auth/signin', credentials).pipe(tap(response => {\n      if (response.token) {\n        localStorage.setItem('token', response.token);\n        this._isLoggedIn = true;\n      }\n    }));\n  }\n  get isLoggedIn() {\n    return !!localStorage.getItem('authToken');\n  }\n  // Méthode pour s'inscrire\n  register(userData) {\n    return this.http.post(`${this.apiUrl}/signup`, userData);\n  }\n  logout() {\n    // Clear the session or JWT token from localStorage or cookies\n    localStorage.removeItem('authToken'); // Example of clearing the token\n    this.router.navigate(['/login']); // Redirect to the login page after logout\n  }\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,GAAG,QAAQ,gBAAgB;;;;AAepC,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB,EAASC,MAAc;IAAvC,SAAI,GAAJD,IAAI;IAAqB,WAAM,GAANC,MAAM;IAH3C,WAAM,GAAG,gCAAgC,CAAC,CAAC;IAC3C,gBAAW,GAAG,KAAK,CAAC,CAAE;EAEgC;EAE9D;EACAC,KAAK,CAACC,WAA6B;IACjC,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAe,uCAAuC,EAAED,WAAW,CAAC,CAACE,IAAI,CAC5FR,GAAG,CAAES,QAAsB,IAAI;MAC7B,IAAIA,QAAQ,CAACC,KAAK,EAAE;QAClBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,QAAQ,CAACC,KAAK,CAAC;QAC7C,IAAI,CAACG,WAAW,GAAG,IAAI;;IAE3B,CAAC,CAAC,CACH;EACH;EAEA,IAAIC,UAAU;IACZ,OAAO,CAAC,CAACH,YAAY,CAACI,OAAO,CAAC,WAAW,CAAC;EAC5C;EACA;EACAC,QAAQ,CAACC,QAAa;IACpB,OAAO,IAAI,CAACd,IAAI,CAACI,IAAI,CAAC,GAAG,IAAI,CAACW,MAAM,SAAS,EAAED,QAAQ,CAAC;EAC1D;EACAE,MAAM;IACJ;IACAR,YAAY,CAACS,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;IACtC,IAAI,CAAChB,MAAM,CAACiB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;EACpC;;;AA7BWpB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAqB,SAAXrB,WAAW;EAAAsB,YAFV;AAAM","names":["tap","AuthService","constructor","http","router","login","credentials","post","pipe","response","token","localStorage","setItem","_isLoggedIn","isLoggedIn","getItem","register","userData","apiUrl","logout","removeItem","navigate","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\HP EliteBook 840 G6\\Desktop\\s1\\AC\\project\\polynomial-project\\frontend\\app-polynomial\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { Router } from '@angular/router';\n\ninterface AuthResponse {\n  token: string;\n}\n\ninterface LoginCredentials {\n  email: string;\n  password: string;\n}\n\n@Injectable({\n  providedIn: 'root', // Fournisseur global (disponible dans toute l'application)\n})\nexport class AuthService {\n  private apiUrl = 'http://localhost:8088/api/auth'; // Remplacez par l'URL de votre API\n  private _isLoggedIn = false;  // private backing field\n\n  constructor(private http: HttpClient,private router: Router) {}\n\n  // Méthode pour se connecter\n  login(credentials: LoginCredentials): Observable<AuthResponse> {\n    return this.http.post<AuthResponse>('http://localhost:8088/api/auth/signin', credentials).pipe(\n      tap((response: AuthResponse) => {\n        if (response.token) {\n          localStorage.setItem('token', response.token);\n          this._isLoggedIn = true;\n        }\n      })\n    );\n  }\n\n  get isLoggedIn(): boolean {\n    return !!localStorage.getItem('authToken');\n  }\n  // Méthode pour s'inscrire\n  register(userData: any): Observable<any> {\n    return this.http.post(`${this.apiUrl}/signup`, userData);\n  }\n  logout() {\n    // Clear the session or JWT token from localStorage or cookies\n    localStorage.removeItem('authToken'); // Example of clearing the token\n    this.router.navigate(['/login']); // Redirect to the login page after logout\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}