{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class HistoriqueService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8089/historiques';\n  }\n  // Méthode pour récupérer les historiques par utilisateur\n  getHistoriqueByUtilisateur(utilisateurId) {\n    return this.http.get(`${this.apiUrl}/utilisateur/${utilisateurId}`);\n  }\n  // Méthode pour ajouter un historique\n  addHistorique(utilisateurId, calculId, historique) {\n    return this.http.post(`${this.apiUrl}/${utilisateurId}/${calculId}`, historique);\n  }\n  // Ajout d'une méthode pour enregistrer l'historique après calcul\n  saveHistoriqueAfterCalculation(utilisateurId, calculId, expression, resultat) {\n    const historique = {\n      expression: expression,\n      resultat: resultat,\n      utilisateurId: utilisateurId,\n      calculId: calculId,\n      dateCalcul: new Date()\n    };\n    return this.addHistorique(utilisateurId, calculId, historique);\n  }\n}\nHistoriqueService.ɵfac = function HistoriqueService_Factory(t) {\n  return new (t || HistoriqueService)(i0.ɵɵinject(i1.HttpClient));\n};\nHistoriqueService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HistoriqueService,\n  factory: HistoriqueService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAeA,OAAM,MAAOA,iBAAiB;EAE5BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IADhB,WAAM,GAAG,mCAAmC;EACZ;EAExC;EACAC,0BAA0B,CAACC,aAAqB;IAC9C,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAe,GAAG,IAAI,CAACC,MAAM,gBAAgBF,aAAa,EAAE,CAAC;EACnF;EAEA;EACAG,aAAa,CAACH,aAAqB,EAAEI,QAAgB,EAAEC,UAAsB;IAC3E,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAa,GAAG,IAAI,CAACJ,MAAM,IAAIF,aAAa,IAAII,QAAQ,EAAE,EAAEC,UAAU,CAAC;EAC9F;EAEA;EACAE,8BAA8B,CAACP,aAAqB,EAAEI,QAAgB,EAAEI,UAAkB,EAAEC,QAAgB;IAC1G,MAAMJ,UAAU,GAAe;MAC7BG,UAAU,EAAEA,UAAU;MACtBC,QAAQ,EAAEA,QAAQ;MAClBT,aAAa,EAAEA,aAAa;MAC5BI,QAAQ,EAAEA,QAAQ;MAClBM,UAAU,EAAE,IAAIC,IAAI;KACrB;IAED,OAAO,IAAI,CAACR,aAAa,CAACH,aAAa,EAAEI,QAAQ,EAAEC,UAAU,CAAC;EAChE;;AAzBWT,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;SAAjBA,iBAAiB;EAAAgB,SAAjBhB,iBAAiB;EAAAiB,YAFhB;AAAM","names":["HistoriqueService","constructor","http","getHistoriqueByUtilisateur","utilisateurId","get","apiUrl","addHistorique","calculId","historique","post","saveHistoriqueAfterCalculation","expression","resultat","dateCalcul","Date","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\HP EliteBook 840 G6\\Desktop\\s1\\AC\\project\\polynomial-project\\frontend\\app-polynomial\\src\\app\\services\\historique.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\ninterface Historique {\n  id?: number;\n  expression: string;\n  resultat: string;\n  dateCalcul?: Date;\n  utilisateurId?: number;\n  calculId?: number;\n}\n@Injectable({\n  providedIn: 'root'\n})\nexport class HistoriqueService {\n  private apiUrl = 'http://localhost:8089/historiques';\n  constructor(private http: HttpClient) { }\n\n  // Méthode pour récupérer les historiques par utilisateur\n  getHistoriqueByUtilisateur(utilisateurId: number): Observable<Historique[]> {\n    return this.http.get<Historique[]>(`${this.apiUrl}/utilisateur/${utilisateurId}`);\n  }\n\n  // Méthode pour ajouter un historique\n  addHistorique(utilisateurId: number, calculId: number, historique: Historique): Observable<Historique> {\n    return this.http.post<Historique>(`${this.apiUrl}/${utilisateurId}/${calculId}`, historique);\n  }\n\n  // Ajout d'une méthode pour enregistrer l'historique après calcul\n  saveHistoriqueAfterCalculation(utilisateurId: number, calculId: number, expression: string, resultat: string): Observable<Historique> {\n    const historique: Historique = {\n      expression: expression,\n      resultat: resultat,\n      utilisateurId: utilisateurId,\n      calculId: calculId,\n      dateCalcul: new Date()\n    };\n\n    return this.addHistorique(utilisateurId, calculId, historique);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}