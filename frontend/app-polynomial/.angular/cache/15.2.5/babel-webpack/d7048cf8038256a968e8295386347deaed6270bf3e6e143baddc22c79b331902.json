{"ast":null,"code":"import { forkJoin, map, switchMap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nimport * as i3 from \"./calcul.service\";\nexport class HistoriqueService {\n  constructor(http, authService, calculService) {\n    this.http = http;\n    this.authService = authService;\n    this.calculService = calculService;\n    this.apiUrl = 'http://localhost:8888/historiques';\n  }\n  getHistoriqueByUtilisateur(id) {\n    return this.http.get(`${this.apiUrl}/utilisateur/${id}`).pipe(switchMap(historiques => {\n      // Utiliser forkJoin pour exécuter toutes les requêtes de manière concurrente\n      const historiqueRequests = historiques.map(historique => {\n        const calcul$ = this.calculService.findById(historique.calculId);\n        return forkJoin([calcul$]).pipe(\n        // On récupère les données et les associe à l'historique\n        map(([calcul]) => ({\n          ...historique,\n          calcul // Ajouter le calcul\n        })));\n      });\n      // Retourner un Observable qui émet les historiques avec les données associées\n      return forkJoin(historiqueRequests);\n    }));\n  }\n  saveHistorique(utilisateurId, calculId) {\n    const url = `http://localhost:8888/historiques/${utilisateurId}/${calculId}`;\n    // Créer un objet pour l'historique, incluant la date actuelle\n    const historiqueData = {\n      utilisateurId,\n      calculId,\n      date: new Date().toISOString() // La date actuelle au format ISO\n    };\n    // Effectuer la requête HTTP POST avec l'objet contenant les informations et la date\n    return this.http.post(url, historiqueData);\n  }\n}\nHistoriqueService.ɵfac = function HistoriqueService_Factory(t) {\n  return new (t || HistoriqueService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i3.CalculService));\n};\nHistoriqueService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HistoriqueService,\n  factory: HistoriqueService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,QAAQ,EAAEC,GAAG,EAAcC,SAAS,QAAQ,MAAM;;;;;AAe3D,OAAM,MAAOC,iBAAiB;EAI5BC,YAAoBC,IAAgB,EAAUC,WAAwB,EAASC,aAA4B;IAAvF,SAAI,GAAJF,IAAI;IAAsB,gBAAW,GAAXC,WAAW;IAAsB,kBAAa,GAAbC,aAAa;IAHpF,WAAM,GAAG,mCAAmC;EAIpD;EACAC,0BAA0B,CAACC,EAAU;IACnC,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAQ,GAAG,IAAI,CAACC,MAAM,gBAAgBF,EAAE,EAAE,CAAC,CAACG,IAAI,CAClEV,SAAS,CAAEW,WAAW,IAAI;MACxB;MACA,MAAMC,kBAAkB,GAAGD,WAAW,CAACZ,GAAG,CAACc,UAAU,IAAG;QACtD,MAAMC,OAAO,GAAG,IAAI,CAACT,aAAa,CAACU,QAAQ,CAACF,UAAU,CAACG,QAAQ,CAAC;QAEhE,OAAOlB,QAAQ,CAAC,CAAEgB,OAAO,CAAC,CAAC,CAACJ,IAAI;QAC9B;QACAX,GAAG,CAAC,CAAC,CAACkB,MAAM,CAAC,MAAM;UACjB,GAAGJ,UAAU;UACbI,MAAM,CAAU;SACjB,CAAC,CAAC,CACJ;MACH,CAAC,CAAC;MAEF;MACA,OAAOnB,QAAQ,CAACc,kBAAkB,CAAC;IACrC,CAAC,CAAC,CACH;EACH;EAGAM,cAAc,CAACC,aAAqB,EAAEH,QAAgB;IACpD,MAAMI,GAAG,GAAG,qCAAqCD,aAAa,IAAIH,QAAQ,EAAE;IAE5E;IACA,MAAMK,cAAc,GAAG;MACrBF,aAAa;MACbH,QAAQ;MACRM,IAAI,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW,EAAE,CAAC;KAChC;IAED;IACA,OAAO,IAAI,CAACrB,IAAI,CAACsB,IAAI,CAAML,GAAG,EAAEC,cAAc,CAAC;EACjD;;AAzCWpB,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;SAAjBA,iBAAiB;EAAAyB,SAAjBzB,iBAAiB;EAAA0B,YAFhB;AAAM","names":["forkJoin","map","switchMap","HistoriqueService","constructor","http","authService","calculService","getHistoriqueByUtilisateur","id","get","apiUrl","pipe","historiques","historiqueRequests","historique","calcul$","findById","calculId","calcul","saveHistorique","utilisateurId","url","historiqueData","date","Date","toISOString","post","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\HP EliteBook 840 G6\\Desktop\\s1\\AC\\project\\polynomial-project\\frontend\\app-polynomial\\src\\app\\services\\historique.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { forkJoin, map, Observable, switchMap } from 'rxjs';\nimport { AuthService } from './auth.service';\nimport { CalculService } from './calcul.service';\n\ninterface Historique {\n  id?: number;\n  expression: string;\n  resultat: string;\n  dateCalcul?: Date;\n  utilisateurId?: number;\n  calculId?: number;\n}\n@Injectable({\n  providedIn: 'root'\n})\nexport class HistoriqueService {\n  private apiUrl = 'http://localhost:8888/historiques';\n  \n\n  constructor(private http: HttpClient, private authService: AuthService,private calculService: CalculService) {\n  }\n  getHistoriqueByUtilisateur(id: number): Observable<any> {\n    return this.http.get<any[]>(`${this.apiUrl}/utilisateur/${id}`).pipe(\n      switchMap((historiques) => {\n        // Utiliser forkJoin pour exécuter toutes les requêtes de manière concurrente\n        const historiqueRequests = historiques.map(historique => {\n          const calcul$ = this.calculService.findById(historique.calculId);\n\n          return forkJoin([ calcul$]).pipe(\n            // On récupère les données et les associe à l'historique\n            map(([calcul]) => ({\n              ...historique, // Conserver les autres propriétés\n              calcul          // Ajouter le calcul\n            }))\n          );\n        });\n\n        // Retourner un Observable qui émet les historiques avec les données associées\n        return forkJoin(historiqueRequests);\n      })\n    );\n  }\n\n\n  saveHistorique(utilisateurId: number, calculId: number): Observable<any> {\n    const url = `http://localhost:8888/historiques/${utilisateurId}/${calculId}`;\n    \n    // Créer un objet pour l'historique, incluant la date actuelle\n    const historiqueData = {\n      utilisateurId,\n      calculId,\n      date: new Date().toISOString() // La date actuelle au format ISO\n    };\n  \n    // Effectuer la requête HTTP POST avec l'objet contenant les informations et la date\n    return this.http.post<any>(url, historiqueData);\n  }\n  \n  \n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}